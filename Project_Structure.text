1) .github > workflows > yaml files
The .github/workflows directory in a project's structure contains configuration files for GitHub Actions. GitHub Actions is a continuous integration and continuous deployment (CI/CD) service provided by GitHub that allows you to automate various aspects of your software development workflow, such as building, testing, and deploying your code. The .github/workflows directory typically contains YAML files that define the specific workflows and automation tasks you want to execute in response to events like code pushes, pull requests, or releases in your GitHub repository.

2) .github > workflows > .gitkeep
Files named .gitkeep (or alternatively, .gitkeep) serve a specific purpose in Git repositories. They are not an inherent part of Git itself, but rather a convention used by developers to make sure empty directories are included in the Git version control system. The name is somewhat arbitrary, and you could use other names like .gitpreserve or similar, but .gitkeep is a common choice.
The purpose of using .gitkeep files is to ensure that Git tracks and maintains empty directories within the repository. By default, Git doesn't track directories that don't contain any files. This can be problematic in scenarios where you want to maintain the directory structure, even if it's currently empty.

3) Notebook
The "notebook" folder in a project structure is typically used to store Jupyter Notebook files (with the .ipynb extension) or other interactive computing documents. Jupyter Notebooks are a popular tool for creating and sharing documents that contain live code, equations, visualizations, and narrative text. These notebooks are often used for various purposes in data science, machine learning, research, and software development projects. 

4) src

5) src > project_name > logger.py
The logger.py module is responsible for managing logging in your project. It defines and configures a logger to capture various log messages generated by your application. This centralization simplifies logging throughout the codebase, allowing you to maintain and update the logging behavior in one place.

6) src > project_name > exceptions.py
In this module, custom exception classes are defined to represent specific error conditions or exceptional situations in your code. These custom exceptions provide clear and meaningful error messages when raised. Using custom exceptions enhances error handling and allows for structured, granular error management.

7) src > project_name > util.py
The util.py module contains utility functions or helper functions that are shared across different parts of your project. These functions offer common and reusable functionality, such as data manipulation or file handling. Organizing these functions in one place promotes a modular design and keeps your codebase organized.

8) requirements.txt
A requirements.txt file is a commonly used convention in Python projects to specify and manage project dependencies. It's a plain text file that lists the Python packages and their versions that your project depends on. 

9) setup.py
The setup.py file is a critical component in Python project structures, particularly when the project is intended to be packaged and distributed. Its primary purpose is to provide metadata about the package and define how it should be installed, packaged, and distributed.

10) .gitignore

11) README.md

12) init_setup.sh

and many more we will explore in near future